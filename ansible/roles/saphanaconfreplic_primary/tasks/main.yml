---
- name: Check SAP HANA replication status on primary node
  shell: "su - {{ hana_sid|lower }}adm -c 'hdbnsutil -sr_state --sapcontrol=1'"
  args:
    warn: false
  register: repl_status_primary
  changed_when: False
  when: hana_sid is defined

- name: Set SAP HANA replication status variable for primary node
  set_fact:
    replication_primary: "yes"
  when: repl_status_primary.stdout.find('operation mode=primary') != -1 and repl_status_primary.stdout.find('mode=none') == -1

- name: Check for HANA Instance status
  shell: |
      /usr/sap/hostctrl/exe/sapcontrol -nr {{ hana_sysno }} -function GetSystemInstanceList
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ hana_sid | lower }}adm"
  register: getinstancestatus_output
  changed_when: False
  when: hana_sid is defined and hana_sysno is defined

- name: Set variable hanastarted
  set_fact:
    hanastarted: yes
  when: '"GRAY" not in getinstancestatus_output.stdout'

- name: Start HANA Instance on Primary node
  shell: |
      /usr/sap/hostctrl/exe/sapcontrol -nr {{ hana_sysno }} -function StartSystem HDB
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ hana_sid | lower }}adm"
  when: hanastarted is not defined

- name: Wait until HANA Instance is started
  shell: |
      /usr/sap/hostctrl/exe/sapcontrol -nr {{ hana_sysno }} -function GetSystemInstanceList
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ hana_sid | lower }}adm"
  register: getinstance_output
  until: '"GREEN" in getinstance_output.stdout'
  retries: 200
  delay: 10
  when: hanastarted is not defined

- name: Replace the holders in the output with the appropriate values
  set_fact:
    replication_params: "{{ (replication_params | regex_replace(replace_item.old_val, replace_item.new_val)) }}"
  loop:
    - { old_val: '<hdb_host_dr>', new_val: "{{ hdb_host_dr }}" }
    - { old_val: '<hdb_hostname_dr>', new_val: "{{ hdb_hostname_dr }}" }
  loop_control:
    loop_var: replace_item
  changed_when: False

- name: Check the status of all paramaters required for SAP HANA SYSTEMDB
  shell: |
    export HISTCONTROL=ignorespace
     su - {{ hana_sid|lower }}adm -c "hdbsql -d SYSTEMDB -u SYSTEM -p \"{{ hana_main_password }}\" -i {{ hana_sysno }} \"select key, value from M_CONFIGURATION_PARAMETER_VALUES where file_name = 'global.ini' and layer_name = 'SYSTEM' and section = '{{ p_system.section }}' and key = '{{ p_system.param }}' and value = '{{ p_system.value }}'\""
  args:
    warn: false
  loop: "{{ replication_params | list }}"
  loop_control:
    loop_var: p_system
  register: systemdb_param_status
  changed_when: False
  no_log: True

- name: Create the list of parameters which are not set or are incorrectly set
  set_fact:
    systemdb_param_to_set: "{{ systemdb_param_to_set|default([]) + [p_systemtoset.p_system] }}"
  loop: "{{ systemdb_param_status.results | list }}"
  loop_control:
    loop_var: p_systemtoset
  when: '"KEY,VALUE\n0 rows selected" in p_systemtoset.stdout'
  no_log: True

- name: Display the list of parameters to be set
  debug:
    var: systemdb_param_to_set
  when: systemdb_param_to_set is defined

- name: Set the parameters for SAP HANA SYSTEMDB in order to enable the replication
  shell: su - {{ hana_sid|lower }}adm -c "hdbsql -d SYSTEMDB -u SYSTEM -p \"{{ hana_main_password }}\" -i {{ hana_sysno }} \"ALTER SYSTEM ALTER CONFIGURATION ('global.ini', 'SYSTEM') SET ('{{ item_repl.section }}' , '{{ item_repl.param }}') = '{{ item_repl.value }}' WITH RECONFIGURE\""
  args:
    warn: false
  loop: "{{ systemdb_param_to_set | list }}"
  loop_control:
    loop_var: item_repl
  no_log: True
  when: systemdb_param_to_set is defined
...
